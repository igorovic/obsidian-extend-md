'use strict';

var url = require('url');
var obsidian = require('obsidian');

async function hRulers(el, ctx) {
    try {
        const paragraphs = el.getElementsByTagName("p");
        for (let i = 0; i < paragraphs.length; i++) {
            const p = paragraphs[i];
            let hr;
            let matchTxt = [...p.innerText.matchAll(/--([\wÂ§]+)--/g)];
            let emoji = p.innerText.split("--").length >= 1
                ? p.innerText.split("--")[1]
                : undefined;
            switch (true) {
                //bold
                case p.innerText === "===":
                    hr = document.createElement("hr");
                    hr.addClass("hr-bld");
                    return el.replaceChild(hr, p);
                // match html emojis
                case !!emoji:
                    hr = document.createElement("hr");
                    hr.addClass("hr-text");
                    hr.setAttribute("data-content", emoji);
                    return el.replaceChild(hr, p);
                // with text
                case matchTxt?.length >= 1:
                    const txt = matchTxt[0][1];
                    if (!txt)
                        return el;
                    hr = document.createElement("hr");
                    hr.addClass("hr-text");
                    hr.setAttribute("data-content", txt);
                    return el.replaceChild(hr, p);
                default:
                    return el;
            }
        }
    }
    catch (err) {
        console.error(err);
        return el;
    }
}
async function UrlHighlighter(source, el, ctx) {
    console.log(source, el);
    console.log(el);
    let presentation;
    try {
        const _url = new url.URL(source);
        //console.log(_url);
        presentation = document.createElement("p");
        presentation.innerHTML = source;
        presentation.innerHTML = presentation.innerHTML.replaceAll("?", `<span class="reserved-char">?</span>`);
        presentation.innerHTML = presentation.innerHTML.replaceAll("&amp;", `<span class="reserved-char">&amp;</span>`);
        presentation.innerHTML = presentation.innerHTML.replaceAll("#", `<span class="reserved-char">#</span>`);
    }
    catch (err) {
        console.error(err);
        presentation = document.createElement("pre");
        presentation.innerText = source;
    }
    finally {
        el.parentElement.replaceChild(presentation, el);
    }
}
class ExtendMDPlugin extends obsidian.Plugin {
    async onload() {
        console.log("Loading extend md plugin.");
        this.registerMarkdownPostProcessor(hRulers);
        this.registerMarkdownCodeBlockProcessor("url", UrlHighlighter);
    }
}

module.exports = ExtendMDPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVVJMIH0gZnJvbSBcInVybFwiO1xyXG5pbXBvcnQgeyBQbHVnaW4sIE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbmltcG9ydCBcIi4vc3R5bGVzL21haW4uc2Nzc1wiO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gaFJ1bGVycyhlbDogSFRNTEVsZW1lbnQsIGN0eDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCkge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBwYXJhZ3JhcGhzID0gZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJwXCIpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhZ3JhcGhzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IHAgPSBwYXJhZ3JhcGhzW2ldO1xyXG4gICAgICBsZXQgaHI7XHJcbiAgICAgIGxldCBtYXRjaFR4dCA9IFsuLi5wLmlubmVyVGV4dC5tYXRjaEFsbCgvLS0oW1xcd8KnXSspLS0vZyldO1xyXG4gICAgICBsZXQgZW1vamkgPVxyXG4gICAgICAgIHAuaW5uZXJUZXh0LnNwbGl0KFwiLS1cIikubGVuZ3RoID49IDFcclxuICAgICAgICAgID8gcC5pbm5lclRleHQuc3BsaXQoXCItLVwiKVsxXVxyXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XHJcbiAgICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICAgIC8vYm9sZFxyXG4gICAgICAgIGNhc2UgcC5pbm5lclRleHQgPT09IFwiPT09XCI6XHJcbiAgICAgICAgICBociA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoclwiKTtcclxuICAgICAgICAgIGhyLmFkZENsYXNzKFwiaHItYmxkXCIpO1xyXG4gICAgICAgICAgcmV0dXJuIGVsLnJlcGxhY2VDaGlsZChociwgcCk7XHJcbiAgICAgICAgLy8gbWF0Y2ggaHRtbCBlbW9qaXNcclxuICAgICAgICBjYXNlICEhZW1vamk6XHJcbiAgICAgICAgICBociA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoclwiKTtcclxuICAgICAgICAgIGhyLmFkZENsYXNzKFwiaHItdGV4dFwiKTtcclxuICAgICAgICAgIGhyLnNldEF0dHJpYnV0ZShcImRhdGEtY29udGVudFwiLCBlbW9qaSk7XHJcbiAgICAgICAgICByZXR1cm4gZWwucmVwbGFjZUNoaWxkKGhyLCBwKTtcclxuICAgICAgICAvLyB3aXRoIHRleHRcclxuICAgICAgICBjYXNlIG1hdGNoVHh0Py5sZW5ndGggPj0gMTpcclxuICAgICAgICAgIGNvbnN0IHR4dCA9IG1hdGNoVHh0WzBdWzFdO1xyXG4gICAgICAgICAgaWYgKCF0eHQpIHJldHVybiBlbDtcclxuICAgICAgICAgIGhyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImhyXCIpO1xyXG4gICAgICAgICAgaHIuYWRkQ2xhc3MoXCJoci10ZXh0XCIpO1xyXG4gICAgICAgICAgaHIuc2V0QXR0cmlidXRlKFwiZGF0YS1jb250ZW50XCIsIHR4dCk7XHJcbiAgICAgICAgICByZXR1cm4gZWwucmVwbGFjZUNoaWxkKGhyLCBwKTtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgcmV0dXJuIGVsO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICByZXR1cm4gZWw7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBVcmxIaWdobGlnaHRlcihcclxuICBzb3VyY2U6IHN0cmluZyxcclxuICBlbDogSFRNTEVsZW1lbnQsXHJcbiAgY3R4OiBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0XHJcbikge1xyXG4gIGNvbnNvbGUubG9nKHNvdXJjZSwgZWwpO1xyXG4gIGNvbnNvbGUubG9nKGVsKTtcclxuICBsZXQgcHJlc2VudGF0aW9uO1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBfdXJsID0gbmV3IFVSTChzb3VyY2UpO1xyXG4gICAgLy9jb25zb2xlLmxvZyhfdXJsKTtcclxuICAgIHByZXNlbnRhdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xyXG4gICAgcHJlc2VudGF0aW9uLmlubmVySFRNTCA9IHNvdXJjZTtcclxuICAgIHByZXNlbnRhdGlvbi5pbm5lckhUTUwgPSBwcmVzZW50YXRpb24uaW5uZXJIVE1MLnJlcGxhY2VBbGwoXHJcbiAgICAgIFwiP1wiLFxyXG4gICAgICBgPHNwYW4gY2xhc3M9XCJyZXNlcnZlZC1jaGFyXCI+Pzwvc3Bhbj5gXHJcbiAgICApO1xyXG4gICAgcHJlc2VudGF0aW9uLmlubmVySFRNTCA9IHByZXNlbnRhdGlvbi5pbm5lckhUTUwucmVwbGFjZUFsbChcclxuICAgICAgXCImYW1wO1wiLFxyXG4gICAgICBgPHNwYW4gY2xhc3M9XCJyZXNlcnZlZC1jaGFyXCI+JmFtcDs8L3NwYW4+YFxyXG4gICAgKTtcclxuICAgIHByZXNlbnRhdGlvbi5pbm5lckhUTUwgPSBwcmVzZW50YXRpb24uaW5uZXJIVE1MLnJlcGxhY2VBbGwoXHJcbiAgICAgIFwiI1wiLFxyXG4gICAgICBgPHNwYW4gY2xhc3M9XCJyZXNlcnZlZC1jaGFyXCI+Izwvc3Bhbj5gXHJcbiAgICApO1xyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgcHJlc2VudGF0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInByZVwiKTtcclxuICAgIHByZXNlbnRhdGlvbi5pbm5lclRleHQgPSBzb3VyY2U7XHJcbiAgfSBmaW5hbGx5IHtcclxuICAgIGVsLnBhcmVudEVsZW1lbnQucmVwbGFjZUNoaWxkKHByZXNlbnRhdGlvbiwgZWwpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXh0ZW5kTURQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG4gIGFzeW5jIG9ubG9hZCgpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiTG9hZGluZyBleHRlbmQgbWQgcGx1Z2luLlwiKTtcclxuICAgIHRoaXMucmVnaXN0ZXJNYXJrZG93blBvc3RQcm9jZXNzb3IoaFJ1bGVycyk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoXCJ1cmxcIiwgVXJsSGlnaGxpZ2h0ZXIpO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsiVVJMIiwiUGx1Z2luIl0sIm1hcHBpbmdzIjoiOzs7OztBQUtBLGVBQWUsT0FBTyxDQUFDLEVBQWUsRUFBRSxHQUFpQztJQUN2RSxJQUFJO1FBQ0YsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFDLE1BQU0sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QixJQUFJLEVBQUUsQ0FBQztZQUNQLElBQUksUUFBUSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1lBQzFELElBQUksS0FBSyxHQUNQLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDO2tCQUMvQixDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7a0JBQzFCLFNBQVMsQ0FBQztZQUNoQixRQUFRLElBQUk7O2dCQUVWLEtBQUssQ0FBQyxDQUFDLFNBQVMsS0FBSyxLQUFLO29CQUN4QixFQUFFLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDbEMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FB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
